<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fool_side</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_lifeform</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init variables

spd = 1;
img_spd_run = 1/5;
img_spd_jump = 1/5;

up = ord("W");
down = ord("S");
left = ord("A");
right = ord("D");

image_speed = img_spd_run
dx = 0;
dy = 0;
x_pos = x;
y_pos = y;
state = "run";



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animation matrices
//jump up
an_jump_up[0] = 0;
an_jump_up[1] = 0;
an_jump_up[2] = 0;
an_jump_up[3] = 15;
an_jump_up[4] = 10;
an_jump_up[5] = 4;
an_jump_up[6] = 3; 
an_jump_up[7] = 0; 
an_jump_up[8] = 0; 
an_jump_up[9] = 0; 
an_jump_up[10] = 0; 
an_jump_up[11] = 0;

//jump down
an_jump_down[0] = 0;
an_jump_down[1] = 0;
an_jump_down[2] = 0;
an_jump_down[3] = 14;
an_jump_down[4] = 9;
an_jump_down[5] = 7;
an_jump_down[6] = 9; 
an_jump_down[7] = 1; 
an_jump_down[8] = 0; 
an_jump_down[9] = 0; 
an_jump_down[10] = 0; 
an_jump_down[11] = 0;

//jump side
an_jump_side[0] = 0;
an_jump_side[1] = 0;
an_jump_side[2] = 0;
an_jump_side[3] = 13;
an_jump_side[4] = 8;
an_jump_side[5] = 10;
an_jump_side[6] = 8; 
an_jump_side[7] = 2; 
an_jump_side[8] = 0; 
an_jump_side[9] = 0; 
an_jump_side[10] = 0; 
an_jump_side[11] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animate jump
if (state = "jump") {
    switch (sprite_index) {
        case spr_fool_jump_up:
            var dd = an_jump_up[image_index]
            break;
        case spr_fool_jump_down:
            var dd = an_jump_down[image_index]
            break;
        case spr_fool_jump_side:
            var dd = an_jump_side[image_index]
            break;
    }
    x_pos += dd*cos(dir);
    y_pos += -dd*sin(dir);
    if (image_index &lt; image_number) alarm[10] = 1/image_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///run
if (state = "run") {
    if (keyboard_check_pressed(up)) {dy = -spd;}
    if (keyboard_check_pressed(down)) {dy = spd;}
    if (keyboard_check_pressed(left)) {dx = -spd;}
    if (keyboard_check_pressed(right)) {dx = spd;}
    if (keyboard_check_released(up) &amp;&amp; dy == -spd) {
        dy = 0;
        if (keyboard_check(down)) {dy = spd;}
    }
    if (keyboard_check_released(down) &amp;&amp; dy == spd) {
        dy = 0;
        if (keyboard_check(up)) {dy = -spd;}
    }
    if (keyboard_check_released(left) &amp;&amp; dx == -spd) {
        dx = 0;
        if (keyboard_check(right)) {dx = spd;}
    }
    if (keyboard_check_released(right) &amp;&amp; dx == spd) {
        dx = 0;
        if (keyboard_check(left)) {dx = -spd;}
    }
    
    if (dx != 0) {
        sprite_index = spr_fool_side;
        image_xscale = sign(dx);
    } else if (dy &lt; 0) {
        sprite_index = spr_fool_up;
    } else if (dy &gt; 0) {
        sprite_index = spr_fool_down;
    } //else sprite_index = spr_fool;
    
    if (dx != 0 &amp;&amp; dy != 0) {
        var katete = spd*0.7;
        x_pos += katete*sign(dx);
        y_pos += katete*sign(dy);
    } else {
        x_pos += dx;
        y_pos += dy;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///jump
if (keyboard_check_pressed(vk_space)){
    if (state = "run") {
        state = "jump";
        switch (sprite_index) {
            case spr_fool_up:
                sprite_index = spr_fool_jump_up;
                break;
            case spr_fool_down:
                sprite_index = spr_fool_jump_down;
                break;
            case spr_fool_side:
                sprite_index = spr_fool_jump_side;
                break;
        }
        dir = degtorad(point_direction(0, 0, dx, dy));
        image_speed = img_spd_jump;
        image_index = 0;
        alarm[10] = 1/image_speed;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement

x = round(x_pos);
y = round(y_pos);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///run after jump
if (state == "jump") {
    state = "run"
    if (sprite_index == spr_fool_jump_side) sprite_index = spr_fool_side;
    else if (sprite_index == spr_fool_jump_up) sprite_index = spr_fool_up;
    else sprite_index = spr_fool_down;
    image_speed = img_spd_jump;
    dx = 0;
    dy = 0;
    if (keyboard_check(up)) {dy = -spd;}
    if (keyboard_check(down)) {dy = spd;}
    if (keyboard_check(left)) {dx = -spd;}
    if (keyboard_check(right)) {dx = spd;}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
