<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///calculating resolution and init. variables
ideal_height = 214;

ideal_width = 0;

aspect_ratio = display_get_width()/display_get_height();

ideal_width = round(ideal_height*aspect_ratio);
if (ideal_width &amp; 1) {
    ideal_width++;
}


//setting up view[0] for all rooms
for (var i = 1; i &lt;= room_last; i++) {
    if (room_exists(i)) {
        room_set_view(i, 0, true, 0, 0, ideal_width, ideal_height, 0, 0, ideal_width, ideal_height, 0, 0, 0, 0, -1);
        room_set_view_enabled(i, true);
    }
    
}
//resizing app.surface and window to calculated resolution
surface_resize(application_surface, ideal_width, ideal_height);
window_set_size(ideal_width, ideal_height);

//show_debug_message(string(display_get_width()));
//show_debug_message(string(display_get_height()));
//show_debug_message(string(ideal_width));
//show_debug_message(string(ideal_height));


//"zooming"
zoom = 1;
view_zoom = 1;

//scaling the window as big as possible (almost)
max_zoom = floor(display_get_width()/ideal_width);

zoom = max_zoom;
window_set_size(ideal_width*zoom, ideal_height*zoom);
display_set_gui_size(ideal_width, ideal_height);
//1 second delay before centering the window (necessary)
alarm[0] = 1;


room_goto_next();


//display_set_windows_alternate_sync(true);
display_reset(0, true)


show_debug_message("ideal height: " + string(ideal_height));
show_debug_message("ideal width: " + string(ideal_width));


randomize();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///end level var.
alpha_fade = 0;
faded = false;

alpha_flash = 0;
flash = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(faded) {
    if (alpha_fade &lt; 1) {
        alarm[2]++;
        alpha_fade += .05;
        if (alpha_fade == 1) {
            room_goto_next();
            faded = true;
        }
    }
} else {
    if (alpha_fade &gt; 0) {
        alarm[2]++;
        alpha_fade -= .01;
        if (alpha_fade == 0) {
            alarm[2] = -1;
            faded = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(flash) {
    if (alpha_flash &lt; 1) {
        alarm[1]++;
        alpha_flash += .01;        
    } if (alpha_flash = 1) {
        alpha_flash = 1;
        flash = true;
    }
} else {
    if (instance_exists(obj_fool)) {
        instance_destroy(obj_fool);
    }
    if (alpha_flash &gt; 0) {
        alarm[1]++;
        alpha_flash -= .01;
    } if (alpha_flash = 0) {
        alpha_flash = 0;
        flash = false;
        alarm[1] = -1;
        alarm[2] = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///centering the window, 1 step delay (necessary)
window_center();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///changing zoom/resolution
if (keyboard_check_pressed(ord("Z"))) {
    zoom++;
    
    if (zoom &gt; max_zoom) {
        zoom = 1;
    }
    
    window_set_size(ideal_width*zoom, ideal_height*zoom);
    alarm[0] = 1;
}

if (keyboard_check_pressed(ord("X"))) {
    zoom--;
    window_set_size(ideal_width*zoom, ideal_height*zoom);
    alarm[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///hotkeys

if (keyboard_check_pressed(vk_escape)) {
    game_end();
}

if (keyboard_check_pressed(vk_f5)) {
    window_set_fullscreen(!window_get_fullscreen());
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///camera
if !(instance_exists(obj_fool)) {
    exit;
}

var mx = mouse_x - view_xview - view_wview/2
var my = mouse_y - view_yview - view_hview/2
var angle = degtorad(point_direction(0, 0, mx, my));
var md = point_distance(0, 0, mx, my);

if (md &lt; 10) md = 0;

view_xview = obj_fool.x - view_wview/2// + 3*(sqrt(md+1)-1)*cos(angle);
view_yview = obj_fool.y - view_hview/2// - 3*(sqrt(md+1)-1)*sin(angle);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rm_level_1) {
    draw_background(bg_level_1_forest, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alpha_flash &gt; 0) {
    draw_set_alpha(alpha_flash);
    draw_set_color(c_white);
    draw_rectangle(0, 0, view_wview, view_hview, false);
    
    draw_set_alpha(1);
}
if (alpha_fade &gt; 0) {
    draw_set_alpha(alpha_fade);
    draw_set_color(c_black);
    draw_rectangle(0, 0, view_wview, view_hview, false);
    
    draw_set_color(c_black);
    draw_set_alpha(1);
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
